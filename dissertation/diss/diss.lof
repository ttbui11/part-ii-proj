\addvspace {10\p@ }
\contentsline {figure}{\numberline {1.1}{\ignorespaces The standard convention of TCP fast retransmit.\relax }}{11}{figure.1.1}
\contentsline {figure}{\numberline {1.2}{\ignorespaces The proposed TCP fast retransmit, assisted by the programmable switch.\relax }}{12}{figure.1.2}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {2.1}{\ignorespaces The process of programming a P4 target. Source: \href {https://p4.org}{P4.org -- Copyright \textcopyright \ 2019}.\relax }}{18}{figure.2.1}
\contentsline {figure}{\numberline {2.2}{\ignorespaces The Xilinx SDNet compilation flow. P4 programs are first translated into a PX program, which is then compiled into a Verilog module using the SDNet flow. SDNet also produces a verification environment.\relax }}{20}{figure.2.2}
\contentsline {figure}{\numberline {2.3}{\ignorespaces Block diagram of the NetFPGA reference switch design.\relax }}{21}{figure.2.3}
\contentsline {figure}{\numberline {2.4}{\ignorespaces The automated P4$\rightarrow $NetFPGA compilation flow. P4 programs are compiled into an HDL instance of the SimpleSumeSwitch architecture, which is then used to replace the Output Port Lookup module in the NetFPGA Reference Switch Design.\relax }}{22}{figure.2.4}
\contentsline {figure}{\numberline {2.5}{\ignorespaces Block diagram of the SimpleSumeSwitch P4 architecture used within the P4$\rightarrow $NetFPGA workflow. Source: \href {https://github.com/NetFPGA/P4-NetFPGA-public/wiki/Workflow-Overview\#simplesumeswitch-architecture}{P4$\rightarrow $NetFPGA Home Wiki}.\relax }}{23}{figure.2.5}
\contentsline {figure}{\numberline {2.6}{\ignorespaces Block diagram showing the workflow of the implementation stage. Dotted arrows represent a revision of previous steps, possibly with adjustments/refinements, in an iterative approach. Where appropriate, the programming language involved is stated. Passing all the steps in red box indicates the design meeting the requirements.\relax }}{26}{figure.2.6}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {3.1}{\ignorespaces The network-level view of the programmable switch. It will be located at the last hop before the receiver, and only performs the fast retransmit on packets from latency-sensitive applications, which are identified by their flow identifier.\relax }}{27}{figure.3.1}
\contentsline {figure}{\numberline {3.2}{\ignorespaces Flowchart of the packet retransmit logic. The steps in red box require the ability to store the packet payload.\relax }}{28}{figure.3.2}
\contentsline {figure}{\numberline {3.3}{\ignorespaces Block diagram of the modified reference switch pipeline. Packets are duplicated after the SimpleSumeSwitch module and being buffered in the Cache Queue. Red blocks represent additional modules. Blue blocks represent modules from the reference switch design that are modified.\relax }}{29}{figure.3.3}
\contentsline {figure}{\numberline {3.4}{\ignorespaces The general state machine structure of a parser.\relax }}{31}{figure.3.4}
\contentsline {figure}{\numberline {3.5}{\ignorespaces The state machine of the design.\relax }}{31}{figure.3.5}
\contentsline {figure}{\numberline {3.6}{\ignorespaces The definition of \texttt {start} state.\relax }}{31}{figure.3.6}
\contentsline {figure}{\numberline {3.7}{\ignorespaces The definition of \texttt {parse\_ipv4} state.\relax }}{32}{figure.3.7}
\contentsline {figure}{\numberline {3.8}{\ignorespaces The definition of \texttt {parse\_tcp} state.\relax }}{32}{figure.3.8}
\contentsline {figure}{\numberline {3.9}{\ignorespaces The packet processing program of the switch. Incoming packets will go through a parser, a match-action pipeline, which including the buffereing logic and a deparser, before coming out to the output queue and the cache queue.\relax }}{33}{figure.3.9}
\contentsline {figure}{\numberline {3.10}{\ignorespaces Pseudocode for checking whether an incoming packet is a new packet.\relax }}{36}{figure.3.10}
\contentsline {figure}{\numberline {3.11}{\ignorespaces Pseudocode for using ``pseudo-parameters'' to perform three operations using only one call to the extern.\relax }}{37}{figure.3.11}
\contentsline {figure}{\numberline {3.12}{\ignorespaces Flowchart of the packet retransmit logic using actions and externs. The steps involved are highlighted in blue box.\relax }}{37}{figure.3.12}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {4.1}{\ignorespaces A Python code snippet to create test packets and specify the expected output.\relax }}{46}{figure.4.1}
\contentsline {figure}{\numberline {4.2}{\ignorespaces Test output of the SDNet simulation using Vivado Simulator showing success.\relax }}{48}{figure.4.2}
\contentsline {figure}{\numberline {4.3}{\ignorespaces Test output of SDNet simulation showing error. Using a Python script to parse the metadata into more readable form, we can debug our program.\relax }}{48}{figure.4.3}
\contentsline {figure}{\numberline {4.4}{\ignorespaces Test output of the SUME simulation using Vivado Simulator showing success. We now receive 30 packets instead of 29.\relax }}{49}{figure.4.4}
\contentsline {figure}{\numberline {4.5}{\ignorespaces Snapshot of Vivado Design Suite GUI showing the traces of the packets coming out of port \texttt {nf0} and \texttt {nf1} of both the output queue and the cache queue. There is a retransmission on the third DUP ACK packet, but none on the fourth.\relax }}{49}{figure.4.5}
\contentsline {figure}{\numberline {4.6}{\ignorespaces The setup for the hardware test.\relax }}{50}{figure.4.6}
\contentsline {figure}{\numberline {4.7}{\ignorespaces Successful test output of the hardware test.\relax }}{50}{figure.4.7}
\contentsline {figure}{\numberline {4.8}{\ignorespaces Setup to measure the latency and throughput of the switch.\relax }}{51}{figure.4.8}
\contentsline {figure}{\numberline {4.9}{\ignorespaces The average latency of the project's device in comparison with the standard switch. Both are measured by sending 1000 packets of various sizes.\relax }}{51}{figure.4.9}
\contentsline {figure}{\numberline {4.10}{\ignorespaces Throughput of the switch testing with 1 port \textbf {(a)} and 4 ports \textbf {(b)} running at full speed of 10 Gbps/port. B: Bytes, M.: Million, B.: Billion.\relax }}{52}{figure.4.10}
\contentsline {figure}{\numberline {4.11}{\ignorespaces An extract from the Timing Analysis Report of Vivado showing our design met all the timing constraints.\relax }}{52}{figure.4.11}
\contentsline {figure}{\numberline {4.12}{\ignorespaces Specialised resources usage extracted from the device utilisation statistics report of Vivado.\relax }}{53}{figure.4.12}
\contentsline {figure}{\numberline {4.13}{\ignorespaces Setup to demonstrate the interoperability of the switch.\relax }}{53}{figure.4.13}
\contentsline {figure}{\numberline {4.14}{\ignorespaces Output of running \texttt {tcpdump} on \texttt {10.0.0.2} capturing packets to and from \texttt {10.0.0.1}.\relax }}{54}{figure.4.14}
\contentsline {figure}{\numberline {4.15}{\ignorespaces Output from the \texttt {iperf3} server machine.\relax }}{54}{figure.4.15}
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {B.1}{\ignorespaces PISA---Protocol-Independent Switch Architecture. Source: \href {https://p4.org}{P4.org -- Copyright \textcopyright \ 2019}.\relax }}{63}{figure.B.1}
\contentsline {figure}{\numberline {B.2}{\ignorespaces Inter-module communication is done via AXI-4 streams (Packets are moved as stream).\relax }}{64}{figure.B.2}
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {D.1}{\ignorespaces The standard convention of TCP handling.\relax }}{69}{figure.D.1}
\contentsline {figure}{\numberline {D.2}{\ignorespaces The proposed TCP handling.\relax }}{69}{figure.D.2}
